import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from config import BOT_TOKEN, ADMIN_IDS, DATA_FILE

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def load_data():
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

@dp.message(Command("start"))
async def handle_start(msg: Message):
    if msg.from_user.id in ADMIN_IDS:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫", callback_data="list_used")],
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_link")],
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete_link")],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="status")]
            ]
        )
        await msg.answer("–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    else:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å", callback_data="get_link")]]
        )
        await msg.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É:", reply_markup=kb)

@dp.callback_query(lambda c: c.data == "get_link")
async def handle_get_callback(callback: CallbackQuery):
    data = load_data()
    if not data["available"]:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.")
        return

    entry = data["available"].pop(0)
    name = entry["name"]
    link = entry["link"]
    username = callback.from_user.username or str(callback.from_user.id)

    data["used"].append({
        "name": name,
        "link": link,
        "user": username,
        "date": callback.message.date.isoformat()
    })
    save_data(data)

    await callback.message.answer(f"üîó *{name}*\n`{link}`", parse_mode="Markdown")

    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, f"{username} –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É: {name}")

@dp.callback_query(lambda c: c.data == "list_used")
async def handle_list_callback(callback: CallbackQuery):
    data = load_data()
    text = "\n".join([
        f"{i+1}. {u['date']} ‚Äî {u['user']} ‚Äî {u['name']}"
        for i, u in enumerate(data["used"])
    ]) or "–ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫."
    await callback.message.answer(text)

@dp.callback_query(lambda c: c.data == "status")
async def handle_status_callback(callback: CallbackQuery):
    data = load_data()
    total_available = len(data["available"])
    total_used = len(data["used"])
    last_entry = data["used"][-1] if data["used"] else None

    text = f"üìä –°—Ç–∞—Ç—É—Å:\n‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {total_available}\n‚Ä¢ –í—ã–¥–∞–Ω–æ: {total_used}"
    if last_entry:
        text += f"\nüïì –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–¥–∞—á–∞:\n{last_entry['date']} ‚Äî {last_entry['user']} ‚Äî {last_entry['name']}"
    await callback.message.answer(text)

@dp.callback_query(lambda c: c.data == "add_link")
async def prompt_add_link(callback: CallbackQuery):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Å—Å—ã–ª–∫–∞>`", parse_mode="Markdown")

@dp.message(Command("add"))
async def handle_add(msg: Message):
    if msg.from_user.id not in ADMIN_IDS:
        return
    parts = msg.text.split(maxsplit=2)
    if len(parts) < 3:
        await msg.answer("–§–æ—Ä–º–∞—Ç: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Å—Å—ã–ª–∫–∞>")
        return
    name, link = parts[1], parts[2]
    data = load_data()
    data["available"].append({"name": name, "link": link})
    save_data(data)
    await msg.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {name}")

@dp.callback_query(lambda c: c.data == "delete_link")
async def prompt_delete_link(callback: CallbackQuery):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n`/delete <–Ω–æ–º–µ—Ä>`", parse_mode="Markdown")

@dp.message(Command("delete"))
async def handle_delete(msg: Message):
    if msg.from_user.id not in ADMIN_IDS:
        return
    parts = msg.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /delete <–Ω–æ–º–µ—Ä>")
        return
    index = int(parts[1]) - 1
    data = load_data()
    if 0 <= index < len(data["used"]):
        entry = data["used"].pop(index)
        save_data(data)
        await msg.answer(f"–£–¥–∞–ª–µ–Ω–æ: {entry['name']}")
    else:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")

@dp.message(lambda msg: not msg.text.startswith("/"))
async def fallback(msg: Message):
    if msg.from_user.id in ADMIN_IDS:
        await handle_start(msg)
    else:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å", callback_data="get_link")]]
        )
        await msg.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É:", reply_markup=kb)

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
